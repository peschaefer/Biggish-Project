@model MVC.ViewModels.LoopIndexViewModel

@{
    ViewData["Title"] = "Loops";
    <link rel="stylesheet" href="~/css/loop_index.css"/>
}

<div>
    <div id="loop-index-header">
        <h1>Loops</h1>
        <div id="buttons">
            <button type="button" class="btn btn-danger" id="batchDeleteButton" onclick="showDeleteLoopModal()">Delete Selected</button>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createLoopModal">Create Loop</button>
        </div>
    </div>
    <hr id="separator">
    <table id="loop-table" class="table table-striped">
        <thead>
        <tr>
            <th>
                <input type="checkbox" id="selectAllCheckbox">
            </th>
            <th>Loop Name</th>
            <th>Routes</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var loop in Model.Loops)
        {
            <tr>
                <td>
                    <input type="checkbox" name="loopCheckbox" data-loop-id="@loop.Id">
                </td>
                <td>@loop.Name</td>
                <td>
                    @foreach (var route in loop.Routes.OrderBy(r => r.Order))
                    {
                        <div>
                            @route.Stop.Name (@route.Order)
                        </div>
                    }
                </td>
                <td>
                    <a onclick="showEditLoopModalWithData(@loop.Id)" class="btn btn-secondary">Edit</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
    <hr id="separator">
    <div id="loop-index-header">
        <h2>Map</h2>
        <div id="map-filter-container">
            <div id="loop-select-menu">
                <label for="loopSelect" style="margin-right: 15px;">Filter by loop:</label>
                <select id="loopSelect">
                    <option value="">All stops</option>
                    @foreach (var loop in Model.Loops)
                    {
                        <option value="@loop.Id">@loop.Name</option>
                    }
                </select>
            </div>
        </div>
    </div>
    <!-- Map Partial -->
    <div id="map-container">
        @await Html.PartialAsync("_MapPartial", Model.MapViewModel)
    </div>
</div>

<!-- Create Loop Modal -->
@await Html.PartialAsync("_CreateLoopModal", Model.CreateLoopViewModel)

<!-- Delete Loop Modal -->
@await Html.PartialAsync("_DeleteLoopModal")

<!-- Edit Loop Modal -->
@await Html.PartialAsync("_EditLoopModal", Model.CreateLoopViewModel)

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    <script src="~/js/loop_actions.js"></script>
    <script src="~/js/map.js"></script>

    <script>

        function addRouteRow(route, routesContainerId) {
            let stopsList = @Html.Raw(Json.Serialize(Model.CreateLoopViewModel.Stops));

            let routesContainer = document.getElementById(routesContainerId);
            let routeIndex = routesContainer.childElementCount;

            // Create new route row
            let routeRow = document.createElement("div");
            routeRow.classList.add("route-row");

            // Stop dropdown
            let stopFormGroup = document.createElement("div");
            stopFormGroup.classList.add("form-group");
            let stopLabel = document.createElement("label");
            stopLabel.innerHTML = "Stop:";
            let stopDropdown = document.createElement("select");
            stopDropdown.name = `Routes[${routeIndex}].SelectedStopId`;
            stopDropdown.classList.add("form-control");

            stopsList.forEach(stop => {
                let option = document.createElement("option");
                option.value = stop.id;
                option.textContent = stop.name;
                stopDropdown.appendChild(option);
            });

            // Set the selected stop in the route, if any
            if (route && route.Stop) {
                stopDropdown.value = route.Stop.Id;
            }

            stopFormGroup.appendChild(stopLabel);
            stopFormGroup.appendChild(stopDropdown);
            routeRow.appendChild(stopFormGroup);
            
            let orderInput = document.createElement("input");
            orderInput.type = "hidden";
            orderInput.name = `Routes[${routeIndex}].Order`;
            orderInput.value = routeIndex + 1; // Automatically set the order value
            routeRow.appendChild(orderInput);

            // Set the order value, if any
            if (route && route.Order) {
                orderInput.value = route.Order;
            }

            // Append route row to the container
            routesContainer.appendChild(routeRow);
  
        }

        function addRoute() {
            addRouteRow(null, "routes-container");
        }

        function showEditLoopModalWithData(loopId) {
             @using Newtonsoft.Json;
             let loops = @Html.Raw(JsonConvert.SerializeObject(Model.Loops, new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore }));
             let loop = loops.find(l => l.Id === loopId);
             

            document.getElementById("editLoopId").value = loop.Id;
            document.getElementById("edit-loop-name-input").querySelector("input").value = loop.Name;

            let routesContainer = document.getElementById("edit-routes-container");
            routesContainer.innerHTML = ""; // Clear the routes container
            loop.Routes.sort((a, b) => a.Order - b.Order);

            loop.Routes.forEach(route => {
                addRouteRow(route, "edit-routes-container");
            });

            $('#editLoopModal').modal('show');
        }
    </script>
    <script>
        function filterMapStops() {
            let loopSelect = document.getElementById("loopSelect");
            let selectedLoopId = parseInt(loopSelect.value);

            let loopStopsData = @Html.Raw(Json.Serialize(Model.LoopStops));

            if (selectedLoopId) {
                let filteredStops = loopStopsData[selectedLoopId.toString()];
                updateMapMarkers(filteredStops);
            } else {
                updateMapMarkers(window.stopsData);
            }
        }
    </script>

    <script>
        document.getElementById("loopSelect").addEventListener("change", filterMapStops);
    </script>
}
